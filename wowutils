#!/bin/bash
#    WoWutils, WoW addon handler.
#    Copyright (C) 2015  Kaan Gen√ß
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>

# Set the defaults
WOW_DIR=
BACKUP_DIR="."
URL_PREFIX="http://www.curse.com/addons/wow/"
URL_SUFFIX="/download"
DOWNLOAD_EXTRACT_REGEXP='(?<=data-href=")\S*(?=")'
USER_AGENT=
WGET_ARGS="--no-verbose"
UNZIP_ARGS="-q -u -o"
TAR_ARGS="-acf"
UNTAR_ARGS="--keep-newer-files -xf"
BACKUP_DATE="+%F_%H.%M.%S"
BACKUP_SUFFIX="_wowutil_backup.tar.gz"
SCRIPT_NAME=$(basename $0)

# Load the configuration
[[ -f "$HOME/.wowutils" ]] && . "$HOME/.wowutils"
[[ -f "$HOME/.config/wowutils" ]] && . "$HOME/.config/wowutils"
[[ -n "$XDG_CONFIG_HOME" && -f "$XDG_CONFIG_HOME/wowutils" ]] && . "$XDG_CONFIG_HOME/wowutils"
[[ -n $USER_AGENT ]] && WGET_ARGS+=" --user-agent='$USER_AGENT'"
WOW_ADDON_SUF="Interface/AddOns"
WOW_CACHE_SUF="Cache"
WOW_WTF_SUF="WTF"
WOW_ADDON_DIR="$WOW_DIR/$WOW_ADDON_SUF"
WOW_CACHE_DIR="$WOW_DIR/$WOW_CACHE_SUF"
WOW_WTF_DIR="$WOW_DIR/$WOW_WTF_SUF"

help () {
    [[ -z "$1" ]] && cat <<EOF
Command line updater for WoW addons, using Curse addons.

Usage: $SCRIPT_NAME <command> [<args>...]

Commands:
  download   Download the addons.
  extract    Extract the given file into addons folder.
  install    Download and install addons.
  update     Update all installed addons.
  list       List installed addons.
  backup     Create a backup of all installed addons and addon settings.
  restore    Restore a backup.
  clean      Delete the WoW cache.
  purge      Delete the WoW cache, all installed addons and addon settings.
  config     Print an example configuration file.
  help       Print this help.

Run $SCRIPT_NAME help <command> to see details for each command.
EOF
    [[ "$1" = "config" ]] && cat <<EOF
Configuration:
  $SCRIPT_NAME can be configured via configuration files placed at:
    * \$XDG_CONFIG_HOME/wowutils
    * $HOME/.config/wowutils
    * $HOME/.wowutils
  $SCRIPT_NAME will execute these files in the given order if they exist.
  Please note that these files will be executed with bash.

  You can get an example configutaion file by executing
    # $SCRIPT_NAME config > ~/.wowutils

  Only one variable in the configuration file is mandatory: WOW_DIR.
  WOW_DIR must be set to the directory containing your WoW installation.
  This is the folder that contains the Wow.exe.
EOF
}

config () {
    cat <<EOF
# Path to your WoW install, the directory containing Wow.exe.
WOW_DIR="/example/dir"

# The directory where the backups will be saved. Note that relative
# paths will start from WOW_DIR. Saved to WOW_DIR by default.
BACKUP_DIR="."

# The file suffix used for backups.
# You can change the file extension to change the compression format.
BACKUP_SUFFIX="_wowutil_backup.tar.gz"

# The format string used while naming backups. See 'man date' for details.
BACKUP_DATE="+%F_%H.%M.%S"

# User agent used while downloading the addons. Passed to wget with --user-agent.
# Leave it empty to use the default.
USER_AGENT=
EOF
}

check_wow_dir () {
    [[ -d "$WOW_ADDON_DIR" && \
    -d "$WOW_CACHE_DIR" && \
    -d "$WOW_WTF_DIR" ]] && return 0
    return 1
}

check_backup_dir () {
    if ! [[ -d "$BACKUP_DIR" ]]; then
	echo "BACKUP_DIR doesn't exist or is not a directory. Please check your config." >&2
	exit 1
    fi
}

check () {
    # Make sure the WoW directory is correct
    if [[ -z "$WOW_DIR" ]]; then
	echo "WOW_DIR is not set. See $SCRIPT_NAME help for details." >&2
	exit 1
    elif ! check_wow_dir ; then
	echo "WOW_DIR does not point to a WoW installation. See $SCRIPT_NAME help for details." >&2
	exit 1
    fi
}

download () {
    local NAME=$1
    local URL=$URL_PREFIX$NAME$URL_SUFFIX
    local TEMP_FILE=$(mktemp --tmpdir "$SCRIPT_NAME.$NAME.XXXXXXXXXX")
    wget $WGET_ARGS -O - "$URL" | \
	grep -Po "$DOWNLOAD_EXTRACT_REGEXP" | \
	wget $WGET_ARGS -i - -O "$TEMP_FILE"
    echo $TEMP_FILE
}

extract () {
    local FILE_NAME=$1
    echo "Extracting archive $FILE_NAME"
    unzip $UNZIP_ARGS -d "$WOW_ADDON_DIR" "$FILE_NAME"
}

install () {
    local NAME=$1
    echo "Installing $NAME"
    local TEMP_FILE="$(download $NAME)"
    extract $TEMP_FILE
}

backup () {
    local BACKUP_NAME="$(date $BACKUP_DATE)$BACKUP_SUFFIX"
    local PWD="$(pwd)"
    cd "$WOW_DIR"
    echo "Creating backup archive $BACKUP_DIR/$BACKUP_NAME"
    tar $TAR_ARGS "$BACKUP_DIR/$BACKUP_NAME" "$WOW_ADDON_SUF" "$WOW_WTF_SUF"
    check_backup "$BACKUP_DIR/$BACKUP_NAME"
    cd "$PWD"
}

check_backup () {
    local BACKUP_NAME=$1
    if tar -t -f "$BACKUP_NAME" "$WOW_ADDON_SUF" "$WOW_WTF_SUF" 1>/dev/null ; then
	echo "Backup seems correct."
    else
	echo "Backup is incorrect or corrupted." >&2
	exit 1
    fi
}

restore () {
    local BACKUP_NAME=$1
    local PWD="$(pwd)"
    cd "$WOW_DIR"
    echo "Restoring backup archive $BACKUP_NAME"
    tar $UNTAR_ARGS "$BACKUP_NAME"
    cd "$PWD"
}

list_names () {
    # X-Curse-Project-ID's match with Curse addon urls in Curse website.
    # Eliminate duplicates, because some addons place multiple folders.
    grep --no-filename -oP "(?<=^## X-Curse-Project-ID: )\S*" "$WOW_ADDON_DIR"/*/*.toc | awk '!a[$0]++'
}

COMMAND=$1
shift
case $COMMAND in
    "download")
	while (( "$#" )); do
	    download "$1"
	    shift
	done
	;;	
    "extract")
	check
	while (( "$#" )); do
	    extract "$1"
	    shift
	done
	;;
    "install")
	while (( "$#" )); do
	    install "$1"
	    shift
	done
	;;
    "update")
	for ADDON_NAME in $(list_names) ; do
	    install "$ADDON_NAME"
	done
	echo "Updates done."
	exit 0
	;;
    "list")
	check
	list_names
	exit 0
	;;
    "backup")
	check
	check_backup_dir
	backup
	;;
    "restore")
	check
	check_backup $1
	restore $1
	exit 0
	;;
    "clean")
	check
	rm -rf "$WOW_CACHE_DIR"/*
	;;
    "purge")
	check
	echo "All addons and addon settings will be DELETED. Are you sure?"
	select YN in "yes" "no"; do
	    case $YN in
		"yes")
		    rm -rf "$WOW_CACHE_DIR"/*
		    rm -rf "$WOW_ADDON_DIR"/*
		    rm -rf "$WOW_WTF_DIR"/*
		    exit 0
		    ;;
		"no")
		    exit 0
		    ;;
	    esac
	done
	;;
    "config")
	config
	exit 0
	;;
    "help"|*)
	help $1
	exit 0
	;;
esac
exit 0
